# -*- coding: utf-8 -*-
"""MovieReview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11S-X_hfs9-Qz477wOs9AtxAg1hupVtNi
"""

from nltk.corpus import movie_reviews
import nltk
import random

nltk.download('movie_reviews')

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load all movie reviews and labels
documents = [(movie_reviews.raw(fileid), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]
random.shuffle(documents)

# Separate text and labels
texts = [text for (text, label) in documents]
labels = [label for (text, label) in documents]

# Convert text into TF-IDF feature vectors
vectorizer = TfidfVectorizer(stop_words="english", max_features=3000)
X = vectorizer.fit_transform(texts)
y = labels

# Split into training and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

# Test accuracy
print("Accuracy:", accuracy_score(y_test, model.predict(X_test)))

def predict_review_sentiment(text):
    vector = vectorizer.transform([text])
    prediction = model.predict(vector)[0]

    if prediction == "pos":
        return "Positive review!"
    else:
        return "Negative review."

# Try your own reviews!
print(predict_review_sentiment("This movie was a masterpiece. I loved it!"))
print(predict_review_sentiment("Boring and slow. Not worth watching."))